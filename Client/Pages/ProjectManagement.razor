@page "/projects"
@attribute [Authorize(Roles = "Admin")]

@inject IProjectService ProjectService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudContainer>
    <MudText Typo="Typo.h4" Style="@($"color:{Theme.PaletteLight.DarkContrastText}; margin-top:{70}px;")">Project Management</MudText>

    <MudCard Style="@($"background:{Theme.PaletteLight.Background}; background-color: transparent;")">
        <MudCardContent>
            <MudText Typo="Typo.h6" Style="@($"color:{Theme.PaletteLight.DarkContrastText};")">Create a New Project</MudText>
            <MudTextField Style="@($"color:{Theme.PaletteLight.DarkContrastText};")" Label="Project Name" @bind-Value="newProject.ProjectName" />
            <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="CreateProject" Color="Color.Warning" Variant="Variant.Filled" Style="margin-top: 10px;" FullWidth="true">Create Project</MudButton>
        </MudCardContent>
    </MudCard>

    <MudCard Style="margin-top: 20px; background-color: transparent;">
        <MudCardContent>
            <MudText Typo="Typo.h6" Style="@($"color:{Theme.PaletteLight.DarkContrastText};")">Projects</MudText>

            @if (projects == null || !projects.Any())
            {
                <MudText Style="@($"color:{Theme.PaletteLight.Warning};")">No projects available. Please create one.</MudText>
            }
            else
            {
                <MudTable Items="@projects" Hover="true" Style="@($"color: {Theme.PaletteLight.DarkContrastText}; background-color: #292c33; border: 1px solid rgba(0, 0, 0, 0.3); border-radius: 8px;")">
                    <HeaderContent>
                        <MudTh Style="@($"color: {Theme.PaletteLight.DarkContrastText};")">Project Name</MudTh>
                        <MudTh Style="@($"color: {Theme.PaletteLight.DarkContrastText};")">Progress</MudTh>
                        <MudTh Style="@($"color: {Theme.PaletteLight.DarkContrastText};")">Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd Style="@($"color: {Theme.PaletteLight.DarkContrastText};")">@context.ProjectName</MudTd>
                        <MudTd Style="@($"color: {Theme.PaletteLight.DarkContrastText};")">@context.OverallProgress %</MudTd>
                        <MudTd>
                            <MudButton OnClick="@(() => OpenEditProjectDialog(context))" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary" Variant="Variant.Text">
                                Edit
                            </MudButton>
                            <MudButton OnClick="@(() => OpenDeleteConfirmationDialog(context.Id))" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Text">
                                Delete
                            </MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private MudTheme Theme = new MudTheme();

    private ProjectDto newProject = new ProjectDto();
    private List<ProjectDto> projects = new List<ProjectDto>();
    private int projectIdToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadProjects();
    }

    private async Task LoadProjects()
    {
        try
        {
            projects = await ProjectService.GetAllProjectsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading projects: {ex.Message}", Severity.Error);
        }
    }

    private async Task CreateProject()
    {
        if (string.IsNullOrWhiteSpace(newProject.ProjectName))
        {
            Snackbar.Add("Project name is required.", Severity.Warning);
            return;
        }

        try
        {
            await ProjectService.CreateProjectAsync(newProject);
            Snackbar.Add("Project created successfully.", Severity.Success);

            await LoadProjects();
            newProject = new ProjectDto();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating project: {ex.Message}", Severity.Error);
        }
    }

    private async Task OpenEditProjectDialog(ProjectDto project)
    {
        try
        {
            var parameters = new DialogParameters { { "ProjectName", project.ProjectName } };
            var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Medium,
                NoHeader = true
            };
            var dialog = DialogService.Show<EditProjectDialog>(null, parameters, options);
            var result = await dialog.Result;

            if (result != null)
            {
                if (!result.Canceled && result.Data != null)
                {
                    var updatedProjectName = (string)result.Data;
                    project.ProjectName = updatedProjectName;
                    await ProjectService.UpdateProjectAsync(project);
                    Snackbar.Add("Project updated successfully.", Severity.Success);

                    await LoadProjects();

                    StateHasChanged();
                }
            }
        }
        catch (Exception e)
        {
            throw new Exception(e.Message);
        }
    }

    private async Task OpenDeleteConfirmationDialog(int projectId)
    {
        try
        {
            var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Medium,
                NoHeader = true
            };
            var dialog = DialogService.Show<DeleteProjectConfirmationDialog>(null, options);

            var result = await dialog.Result;
            if (result != null)
            {
                if (!result.Canceled)
                {
                    projectIdToDelete = projectId;
                    var response = await ProjectService.DeleteProjectAsync(projectIdToDelete);

                    if (response.Success)
                    {
                        Snackbar.Add(response.Message, Severity.Success);
                    }
                    else
                    {
                        Snackbar.Add(response.Message, Severity.Error);
                    }

                    await LoadProjects();
                }
            }
        }
        catch (Exception e)
        {
            throw new Exception(e.Message);
        }
    }
}
