@inject INotificationService NotificationService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudContainer>
    <MudText Typo="Typo.h6">Notifications</MudText>

    <MudMenu Icon="@Icons.Material.Filled.Notifications" Color="Color.Primary" Dense="true">
        @if (notifications == null || !notifications.Any())
        {
            <MudText>No notifications</MudText>
        }
        else
        {
            @foreach (var notification in notifications)
            {
                <MudMenuItem @onclick="() => MarkAsRead(notification.Id)">
                    @if (!notification.IsRead)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Markunread" Color="Color.Error" />
                    }
                    @notification.Message
                </MudMenuItem>
            }
        }
    </MudMenu>
</MudContainer>

@code {
    private List<NotificationDto> notifications = new List<NotificationDto>();

    protected override async Task OnInitializedAsync()
    {
        await LoadNotifications();
    }

    // Load notifications for the current user
    private async Task LoadNotifications()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            var userIdClaim = user.FindFirst(c => c.Type == "sub" || c.Type == "nameid" || c.Type == ClaimTypes.NameIdentifier);
            if (userIdClaim != null)
            {
                string userId = userIdClaim.Value;
                notifications = await NotificationService.GetNotificationsByUserIdAsync(userId);
            }
            else
            {
                Snackbar.Add("Unable to retrieve user ID.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading notifications: {ex.Message}", Severity.Error);
        }
    }

    // Mark a notification as read
    private async Task MarkAsRead(int notificationId)
    {
        try
        {
            await NotificationService.MarkAsReadAsync(notificationId);
            Snackbar.Add("Notification marked as read.", Severity.Success);

            // Refresh the notification list
            await LoadNotifications();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error marking notification as read: {ex.Message}", Severity.Error);
        }
    }
}
